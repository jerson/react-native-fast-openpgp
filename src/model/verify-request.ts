// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class VerifyRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VerifyRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVerifyRequest(bb:flatbuffers.ByteBuffer, obj?:VerifyRequest):VerifyRequest {
  return (obj || new VerifyRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVerifyRequest(bb:flatbuffers.ByteBuffer, obj?:VerifyRequest):VerifyRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VerifyRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

signature():string|null
signature(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
signature(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

message():string|null
message(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
message(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

publicKey():string|null
publicKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
publicKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startVerifyRequest(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addSignature(builder:flatbuffers.Builder, signatureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, signatureOffset, 0);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, messageOffset, 0);
}

static addPublicKey(builder:flatbuffers.Builder, publicKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, publicKeyOffset, 0);
}

static endVerifyRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createVerifyRequest(builder:flatbuffers.Builder, signatureOffset:flatbuffers.Offset, messageOffset:flatbuffers.Offset, publicKeyOffset:flatbuffers.Offset):flatbuffers.Offset {
  VerifyRequest.startVerifyRequest(builder);
  VerifyRequest.addSignature(builder, signatureOffset);
  VerifyRequest.addMessage(builder, messageOffset);
  VerifyRequest.addPublicKey(builder, publicKeyOffset);
  return VerifyRequest.endVerifyRequest(builder);
}
}
