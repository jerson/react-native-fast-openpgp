// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class FileHints {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FileHints {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFileHints(bb:flatbuffers.ByteBuffer, obj?:FileHints):FileHints {
  return (obj || new FileHints()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFileHints(bb:flatbuffers.ByteBuffer, obj?:FileHints):FileHints {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FileHints()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * IsBinary can be set to hint that the contents are binary data.
 */
isBinary():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_is_binary(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

/**
 * FileName hints at the name of the file that should be written. It's
 * truncated to 255 bytes if longer. It may be empty to suggest that the
 * file should not be written to disk. It may be equal to "_CONSOLE" to
 * suggest the data should not be written to disk.
 */
fileName():string|null
fileName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fileName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ModTime format allowed: RFC3339, contains the modification time of the file, or the zero time if not applicable.
 */
modTime():string|null
modTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startFileHints(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addIsBinary(builder:flatbuffers.Builder, isBinary:boolean) {
  builder.addFieldInt8(0, +isBinary, +false);
}

static addFileName(builder:flatbuffers.Builder, fileNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, fileNameOffset, 0);
}

static addModTime(builder:flatbuffers.Builder, modTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, modTimeOffset, 0);
}

static endFileHints(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFileHints(builder:flatbuffers.Builder, isBinary:boolean, fileNameOffset:flatbuffers.Offset, modTimeOffset:flatbuffers.Offset):flatbuffers.Offset {
  FileHints.startFileHints(builder);
  FileHints.addIsBinary(builder, isBinary);
  FileHints.addFileName(builder, fileNameOffset);
  FileHints.addModTime(builder, modTimeOffset);
  return FileHints.endFileHints(builder);
}
}
