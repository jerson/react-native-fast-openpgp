// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

/**
 * An Entity represents the components of an OpenPGP key: a primary public key
 * (which must be a signing key), one or more identities claimed by that key,
 * and zero or more subkeys, which may be encryption keys.
 */
export class Entity {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Entity {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEntity(bb:flatbuffers.ByteBuffer, obj?:Entity):Entity {
  return (obj || new Entity()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEntity(bb:flatbuffers.ByteBuffer, obj?:Entity):Entity {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Entity()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

publicKey():string|null
publicKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
publicKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

privateKey():string|null
privateKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
privateKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

passphrase():string|null
passphrase(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
passphrase(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startEntity(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addPublicKey(builder:flatbuffers.Builder, publicKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, publicKeyOffset, 0);
}

static addPrivateKey(builder:flatbuffers.Builder, privateKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, privateKeyOffset, 0);
}

static addPassphrase(builder:flatbuffers.Builder, passphraseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, passphraseOffset, 0);
}

static endEntity(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createEntity(builder:flatbuffers.Builder, publicKeyOffset:flatbuffers.Offset, privateKeyOffset:flatbuffers.Offset, passphraseOffset:flatbuffers.Offset):flatbuffers.Offset {
  Entity.startEntity(builder);
  Entity.addPublicKey(builder, publicKeyOffset);
  Entity.addPrivateKey(builder, privateKeyOffset);
  Entity.addPassphrase(builder, passphraseOffset);
  return Entity.endEntity(builder);
}
}
