// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class BoolResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BoolResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBoolResponse(bb:flatbuffers.ByteBuffer, obj?:BoolResponse):BoolResponse {
  return (obj || new BoolResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBoolResponse(bb:flatbuffers.ByteBuffer, obj?:BoolResponse):BoolResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BoolResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

output():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_output(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

error():string|null
error(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
error(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startBoolResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addOutput(builder:flatbuffers.Builder, output:boolean) {
  builder.addFieldInt8(0, +output, +false);
}

static addError(builder:flatbuffers.Builder, errorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, errorOffset, 0);
}

static endBoolResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBoolResponse(builder:flatbuffers.Builder, output:boolean, errorOffset:flatbuffers.Offset):flatbuffers.Offset {
  BoolResponse.startBoolResponse(builder);
  BoolResponse.addOutput(builder, output);
  BoolResponse.addError(builder, errorOffset);
  return BoolResponse.endBoolResponse(builder);
}
}
