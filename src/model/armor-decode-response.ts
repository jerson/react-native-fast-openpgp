// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ArmorMetadata } from '../model/armor-metadata';


export class ArmorDecodeResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):ArmorDecodeResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsArmorDecodeResponse(bb:flatbuffers.ByteBuffer, obj?:ArmorDecodeResponse):ArmorDecodeResponse {
  return (obj || new ArmorDecodeResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsArmorDecodeResponse(bb:flatbuffers.ByteBuffer, obj?:ArmorDecodeResponse):ArmorDecodeResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ArmorDecodeResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

output(obj?:ArmorMetadata):ArmorMetadata|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ArmorMetadata()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

error():string|null
error(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
error(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startArmorDecodeResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addOutput(builder:flatbuffers.Builder, outputOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, outputOffset, 0);
}

static addError(builder:flatbuffers.Builder, errorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, errorOffset, 0);
}

static endArmorDecodeResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createArmorDecodeResponse(builder:flatbuffers.Builder, outputOffset:flatbuffers.Offset, errorOffset:flatbuffers.Offset):flatbuffers.Offset {
  ArmorDecodeResponse.startArmorDecodeResponse(builder);
  ArmorDecodeResponse.addOutput(builder, outputOffset);
  ArmorDecodeResponse.addError(builder, errorOffset);
  return ArmorDecodeResponse.endArmorDecodeResponse(builder);
}
}
