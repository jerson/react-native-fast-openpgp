// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { PublicKeyMetadata } from '../model/public-key-metadata';


export class PublicKeyMetadataResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PublicKeyMetadataResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPublicKeyMetadataResponse(bb:flatbuffers.ByteBuffer, obj?:PublicKeyMetadataResponse):PublicKeyMetadataResponse {
  return (obj || new PublicKeyMetadataResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPublicKeyMetadataResponse(bb:flatbuffers.ByteBuffer, obj?:PublicKeyMetadataResponse):PublicKeyMetadataResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PublicKeyMetadataResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

output(obj?:PublicKeyMetadata):PublicKeyMetadata|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new PublicKeyMetadata()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

error():string|null
error(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
error(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startPublicKeyMetadataResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addOutput(builder:flatbuffers.Builder, outputOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, outputOffset, 0);
}

static addError(builder:flatbuffers.Builder, errorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, errorOffset, 0);
}

static endPublicKeyMetadataResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPublicKeyMetadataResponse(builder:flatbuffers.Builder, outputOffset:flatbuffers.Offset, errorOffset:flatbuffers.Offset):flatbuffers.Offset {
  PublicKeyMetadataResponse.startPublicKeyMetadataResponse(builder);
  PublicKeyMetadataResponse.addOutput(builder, outputOffset);
  PublicKeyMetadataResponse.addError(builder, errorOffset);
  return PublicKeyMetadataResponse.endPublicKeyMetadataResponse(builder);
}
}
